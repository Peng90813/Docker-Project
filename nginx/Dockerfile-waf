# Use the Alpine base image for the builder stage
FROM alpine:latest AS builder

# Install necessary dependencies, including linux-headers
RUN apk add --no-cache \
    pcre-dev \
    zlib-dev \
    openssl-dev \
    wget \
    git \
    build-base \
    brotli-dev \
    libxml2-dev \
    libxslt-dev \
    curl-dev \
    yajl-dev \
    lmdb-dev \
    geoip-dev \
    lua-dev \
    automake \
    autoconf \
    libtool \
    pkgconfig \
    linux-headers

# Set the working directory
WORKDIR /app

# Set the Nginx version as a build argument
ARG NGINX_VERSION=1.27.2

# Download and extract the specified version of Nginx
RUN wget https://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz && \
    tar -zxf nginx-${NGINX_VERSION}.tar.gz

# Clone the ngx_brotli module
RUN git clone --recurse-submodules -j8 https://github.com/google/ngx_brotli

# Clone and build libmodsecurity
RUN git clone --depth 1 https://github.com/SpiderLabs/ModSecurity /app/ModSecurity && \
    cd /app/ModSecurity && \
    git submodule init && \
    git submodule update && \
    ./build.sh && \
    ./configure && \
    make && make install

# Clone the ModSecurity-nginx connector
RUN git clone --depth 1 https://github.com/SpiderLabs/ModSecurity-nginx /app/ModSecurity-nginx


# 下载并构建 Zstandard
ARG ZSTD_VERSION=1.5.6
RUN wget https://github.com/facebook/zstd/releases/download/v1.5.6/zstd-${ZSTD_VERSION}.tar.gz && \
    tar -xzf zstd-${ZSTD_VERSION}.tar.gz && \
    cd zstd-${ZSTD_VERSION} && \
    make clean && \
    CFLAGS="-fPIC" make && make install


# Clone the Zstd module
RUN git clone --depth=10 https://github.com/tokers/zstd-nginx-module.git /app/ngx_http_zstd_module

# Build the dynamic modules including Zstd
RUN cd nginx-${NGINX_VERSION} && \
    ./configure --with-compat \
                --add-dynamic-module=../ngx_brotli \
                --add-dynamic-module=../ModSecurity-nginx \
                --add-dynamic-module=../ngx_http_zstd_module && \
    make modules

# Use the official Nginx Alpine image for the final stage
FROM nginx:alpine

ARG NGINX_VERSION=1.27.2
COPY --from=builder /app/nginx-${NGINX_VERSION}/objs/*.so /etc/nginx/modules/

# Copy libmodsecurity directory files to /usr/lib/
COPY --from=builder /usr/local/modsecurity/lib/* /usr/lib/

# Define build argument for Core Rule Set version
ARG CORERULESET_VERSION="4.7.0"

# Create configuration directory
RUN mkdir -p /etc/nginx/modsec && \
    wget https://github.com/coreruleset/coreruleset/archive/v${CORERULESET_VERSION}.tar.gz && \
    tar -xzf v${CORERULESET_VERSION}.tar.gz --strip-components=1 -C /etc/nginx/modsec && \
    rm -f v${CORERULESET_VERSION}.tar.gz

RUN wget https://raw.githubusercontent.com/SpiderLabs/ModSecurity/v3/master/modsecurity.conf-recommended -O /etc/nginx/modsec/modsecurity.conf && \
    sed -i 's/SecRuleEngine DetectionOnly/SecRuleEngine On/' /etc/nginx/modsec/modsecurity.conf

RUN apk add lua5.1 lua5.1-dev pcre pcre-dev yajl yajl-dev  
RUN ldconfig /usr/lib
RUN wget https://raw.githubusercontent.com/SpiderLabs/ModSecurity/v3/master/unicode.mapping -O /etc/nginx/modsec/unicode.mapping
